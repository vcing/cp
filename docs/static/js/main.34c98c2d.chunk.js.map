{"version":3,"sources":["components/Test/index.module.css","components/Calendar/index.module.css","components/Calendar/index.tsx","lib/index.ts","components/Test/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Calendar","props","nodeGroups","elements","forEach","nodeGroup","nodes","node","push","key","id","className","styles","style","width","siblings","height","duration","top","start","left","index","calendar","title","wrap","timeLine","map","time","timeGroup","timeHalf","container","isValidEvent","event","end","merge","events","length","every","Error","sort","a","b","result","startPointer","endPointer","currentEventGroup","i","currentEvent","Math","max","generateNodeGroup","eventGroup","eventStack","unshift","sortedKeys","Object","keys","parseInt","currentSiblings","maxSiblings","occupied","findIndex","undefined","generateEvents","eventCount","minHeight","maxHeight","floor","random","min","randomTest","addMessage","setData","times","computeOnly","testData","startTime","Date","console","timeEnd","Test","data","useState","setStart","setEnd","count","setCount","setTimes","setMinHeight","setMaxHeight","messages","setMessages","message","set","onChange","type","value","target","onRemoveClick","newData","splice","removeEvent","invalidAlert","alert","isSettingValid","Number","isNaN","test","block","blockTitle","blockContent","dataList","remove","onClick","inputArea","htmlFor","add","startNumber","endNumber","newEvent","addEvent","dialog","reverse","setting","disabled","defaultData","App","window","layOutDay","dataWithId","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.34c98c2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Test_test__3fKby\",\"title\":\"Test_title__1oKfi\",\"block\":\"Test_block__OQW3K\",\"blockTitle\":\"Test_blockTitle__3SYvg\",\"blockContent\":\"Test_blockContent__1pdZm\",\"dataList\":\"Test_dataList__3P2sI\",\"remove\":\"Test_remove__2racC\",\"inputArea\":\"Test_inputArea__10vpA\",\"add\":\"Test_add__5l8df\",\"dialog\":\"Test_dialog__13zPF\",\"message\":\"Test_message__1gYyL\",\"setting\":\"Test_setting__1OOYf\",\"disabled\":\"Test_disabled__2LBEQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"calendar\":\"Calendar_calendar__TTH3C\",\"title\":\"Calendar_title__2Vakv\",\"wrap\":\"Calendar_wrap__27NA6\",\"timeLine\":\"Calendar_timeLine__26J4G\",\"timeGroup\":\"Calendar_timeGroup__2uy7e\",\"time\":\"Calendar_time__3UyuH\",\"timeHalf\":\"Calendar_timeHalf__Dyh7b\",\"container\":\"Calendar_container__3AlIY\",\"node\":\"Calendar_node__3ApFB\"};","import React from \"react\";\nimport { NodeGroup } from \"../../lib/index\";\nimport styles from \"./index.module.css\";\n\nconst Calendar = (props: { nodeGroups: NodeGroup[] }) => {\n  const { nodeGroups } = props;\n  const times = [9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8];\n  const elements: React.ReactElement[] = [];\n  nodeGroups.forEach((nodeGroup) => {\n    nodeGroup.nodes.forEach((node) => {\n      elements.push(\n        <div\n          key={node.id}\n          className={styles.node}\n          style={{\n            width: 600 / nodeGroup.siblings,\n            height: node.duration,\n            top: node.start,\n            left: (node.index * 600) / nodeGroup.siblings,\n          }}\n        >\n          <h3>Sample Item</h3>\n          <p>Sample Location</p>\n        </div>\n      );\n    });\n  });\n  return (\n    <div className={styles.calendar}>\n      <h1 className={styles.title}>Calendar</h1>\n      <div className={styles.wrap}>\n        <div className={styles.timeLine}>\n          {times.map((time, index) => (\n            <div key={time} className={styles.timeGroup}>\n              <div className={styles.time}>\n                {time}\n                :00\n                <span>{index < 4 ? \"AM\" : \"PM\"}</span>\n              </div>\n              <div className={styles.timeHalf}>\n                {time}\n                :30\n              </div>\n            </div>\n          ))}\n          <div className={styles.timeGroup}>\n            <div className={styles.time}>\n              9:00\n              <span>PM</span>\n            </div>\n          </div>\n        </div>\n        <div className={styles.container}>{elements}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Calendar;\n","/**\n *\n * 事件结构\n * 由于无论是react列表，还是新增删除操作\n * 都需要对每一个事件有一个唯一标识\n * 所以在读取数据时默认会将该事件在数组中的序号作为ID\n * @export\n * @interface Event\n */\nexport interface Event {\n  id: number;\n  start: number;\n  end: number;\n}\n\n/**\n * 事件组\n * 表示一系列相互影响的数据\n * 由于任意两个数据如果在事件时间上有重合，则他们就应该一样宽\n * 所以以一组互相存在区间交集的事件为单位进行布局运算\n * 保存开始结束时间方便之后插入新时间事直接插入对应组而不影响其他组\n *\n * @export\n * @interface EventGroup\n */\nexport interface EventGroup {\n  id: number;\n  events: Event[];\n  start: number;\n  end: number;\n}\n\n/**\n * 可渲染节点\n * 节点信息加上节点组中的兄弟数量信息就可以直接渲染出一个事件的位置\n *\n * @export\n * @interface Node\n */\nexport interface Node {\n  id: number;\n  start: number;\n  index: number;\n  duration: number;\n}\n\n/**\n * 节点组\n * 由事件组进过计算而来\n * 包含渲染所需要的兄弟数量(列数)信息\n *\n * @export\n * @interface NodeGroup\n */\nexport interface NodeGroup {\n  id: number;\n  nodes: Node[];\n  siblings: number;\n}\n\nexport const isValidEvent = (event: Event) => {\n  if (event.start >= event.end || event.start < 0 || event.end > 720)\n    return false;\n  return true;\n};\n\nexport /**\n * 合并相互存在的交集的事件为一个事件组\n *\n * @param {Event[]} events\n * @returns {EventGroup[]}\n */\nconst merge = (events: Event[]) => {\n  if (events.length === 0) return [];\n  if (!events.every(isValidEvent)) {\n    throw new Error(\"invalid events\");\n  }\n  // 先按开始事件进行排序\n  events.sort((a, b) => {\n    if (a.start !== b.start) {\n      return a.start - b.start;\n    }\n    return a.end - b.end;\n  });\n  const result: EventGroup[] = [];\n  // 用前后两个滑动指针来统计该组范围\n  let startPointer = events[0].start;\n  let endPointer = events[0].end;\n  let currentEventGroup: EventGroup = {\n    id: result.length,\n    events: [events[0]],\n    start: startPointer,\n    end: endPointer,\n  };\n\n  for (let i = 1; i < events.length; i += 1) {\n    const currentEvent = events[i];\n    if (currentEvent.start >= endPointer) {\n      currentEventGroup.end = endPointer;\n      result.push(currentEventGroup);\n      startPointer = currentEvent.start;\n      endPointer = currentEvent.end;\n      currentEventGroup = {\n        id: result.length,\n        events: [currentEvent],\n        start: startPointer,\n        end: endPointer,\n      };\n    } else {\n      endPointer = Math.max(currentEvent.end, endPointer);\n      currentEventGroup.events.push(currentEvent);\n    }\n  }\n  currentEventGroup.end = endPointer;\n  result.push(currentEventGroup);\n\n  return result;\n};\n\n//\nexport /**\n *\n * 将EventGroup转化成可以直接渲染的节点组NodeGroup形式\n *\n * @param {EventGroup} eventGroup\n * @returns {NodeGroup}\n */\nconst generateNodeGroup = (eventGroup: EventGroup) => {\n  // 如果该组只有一个事件 则为独占模式\n  if (eventGroup.events.length === 1) {\n    const currentEvent = eventGroup.events[0];\n    return {\n      id: eventGroup.id,\n      nodes: [\n        {\n          id: currentEvent.id,\n          start: currentEvent.start,\n          duration: currentEvent.end - currentEvent.start,\n          index: 0,\n        },\n      ],\n      siblings: 1,\n    } as NodeGroup;\n  }\n\n  const nodeGroup: NodeGroup = {\n    id: eventGroup.id,\n    nodes: [],\n    siblings: 0,\n  };\n\n  // 以时间点为key来记录每个时间点上的事件\n  const eventStack: { [key: number]: Event[] } = {};\n\n  eventGroup.events.forEach((event) => {\n    // 如果一个时间点有多个开始结束时间，则应先处理结束事件，让出空位\n    // 所以结束事件往数组头部插入,开始事件往数组尾部插入\n    if (eventStack[event.start]) {\n      eventStack[event.start].push(event);\n    } else {\n      eventStack[event.start] = [event];\n    }\n\n    if (eventStack[event.end]) {\n      eventStack[event.end].unshift(event);\n    } else {\n      eventStack[event.end] = [event];\n    }\n  });\n\n  // 按事件排序 然后进行遍历\n  const sortedKeys = Object.keys(eventStack)\n    .map((key) => parseInt(key, 10))\n    .sort((a, b) => a - b);\n  // 记录经过上一个节点后的兄弟节点数量\n  let currentSiblings = 0;\n  // 当前事件组的最大兄弟数量\n  let maxSiblings = 0;\n  // 统计列的占用情况\n  const occupied: number[] = [];\n  sortedKeys.forEach((key) => {\n    const events = eventStack[key];\n    // 处理同一时间节点上的多个进出栈事件\n    events.forEach((event) => {\n      if (key === event.start) {\n        currentSiblings += 1;\n        // 如果occupied为空直接占第一个位置，否则进行查找\n        let index =\n          occupied.length === 0\n            ? 0\n            : occupied.findIndex((i) => i === undefined || i === -1);\n        // 如果查找不到空位，则往后追加\n        index = index === -1 ? occupied.length : index;\n        occupied[index] = event.id; // 占位\n        nodeGroup.nodes.push({\n          id: event.id,\n          start: event.start,\n          duration: event.end - event.start,\n          index,\n        });\n      } else {\n        currentSiblings -= 1;\n        const index = occupied.findIndex((i) => i === event.id);\n        // 清除占位\n        occupied[index] = -1;\n      }\n    });\n    maxSiblings = Math.max(maxSiblings, currentSiblings);\n  });\n\n  nodeGroup.siblings = maxSiblings;\n\n  return nodeGroup;\n};\n","/* eslint-disable no-alert */\nimport React, { SetStateAction, Dispatch, useState } from \"react\";\nimport styles from \"./index.module.css\";\nimport { merge, generateNodeGroup } from \"../../lib\";\n\ntype SetData = Dispatch<\n  SetStateAction<{ start: number; end: number; id: number }[]>\n>;\n\ntype Data = { start: number; end: number; id: number }[];\n\ninterface propsType {\n  setData: SetData;\n  data: Data;\n}\n\n/**\n * 根据规则生成新事件\n *\n * @param {number} eventCount\n * @param {number} minHeight\n * @param {number} maxHeight\n * @returns\n */\nconst generateEvents = (\n  eventCount: number,\n  minHeight: number,\n  maxHeight: number\n) => {\n  const events: Data = [];\n  for (let i = 0; i < eventCount; i += 1) {\n    const start = Math.floor(Math.random() * (719 - minHeight));\n    const end = Math.floor(\n      start +\n        minHeight +\n        Math.random() * Math.min(720 - start - minHeight, maxHeight)\n    );\n    events.push({\n      start,\n      end,\n      id: i,\n    });\n  }\n\n  return events;\n};\n\n/**\n *  随机测试函数\n * 根据指定条件进行渲染或者单纯运行布局计算\n *\n * @param {(message: string) => void} addMessage\n * @param {SetData} setData hooks 设置数据\n * @param {number} eventCount 单次运行事件总数量\n * @param {number} times 运行次数 如果不为1 则只进行运算(因为react会合并多次数据变动结果)\n * @param {number} [minHeight=30]\n * @param {number} [maxHeight=720]\n * @param {boolean} [computeOnly=false]\n * @returns\n */\nconst randomTest = (\n  addMessage: (message: string) => void,\n  setData: SetData,\n  eventCount: number,\n  times: number,\n  minHeight: number = 30,\n  maxHeight: number = 720,\n  computeOnly: boolean = false\n) => {\n  const testData: Data[] = [];\n  for (let i = 0; i < times; i += 1) {\n    testData.push(generateEvents(eventCount, minHeight, maxHeight));\n  }\n\n  const startTime = +new Date();\n  console.time(computeOnly ? \"compute\" : \"render\");\n  testData.forEach((events) => {\n    if (computeOnly) {\n      const eventGroups = merge(events);\n      eventGroups.map(generateNodeGroup);\n    } else {\n      setData(events);\n    }\n  });\n  console.timeEnd(computeOnly ? \"compute\" : \"render\");\n  addMessage(\n    `${\n      computeOnly ? \"Compute\" : \"Render\"\n    } ${eventCount} events layout ${times} times in ${\n      +new Date() - startTime\n    }ms`\n  );\n\n  return true;\n};\n\n/**\n *\n * 插入新事件\n * @param {Data} data\n * @param {SetData} setData\n * @param {string} start\n * @param {string} end\n * @returns\n */\nconst addEvent = (data: Data, setData: SetData, start: string, end: string) => {\n  const startNumber = +start;\n  const endNumber = +end;\n  if (Number.isNaN(startNumber)) return alert(\"start must be a number.\");\n  if (Number.isNaN(endNumber)) return alert(\"end must be a number.\");\n  if (startNumber < 0 || startNumber > 719)\n    return alert(\"start must be with 0 ~ 719\");\n  if (endNumber < 1 || endNumber > 720)\n    return alert(\"end must be with 1 ~ 720\");\n  if (endNumber <= startNumber) return alert(\"end must be large then start.\");\n  const newEvent = {\n    start: startNumber,\n    end: endNumber,\n    id: data.length === 0 ? 0 : Math.max(...data.map((event) => event.id)) + 1,\n  };\n\n  setData([...data, newEvent]);\n\n  return true;\n};\n\n/**\n * 根据ID删除事件\n *\n * @param {Data} data\n * @param {SetData} setData\n * @param {number} id\n * @returns\n */\nconst removeEvent = (data: Data, setData: SetData, id: number) => {\n  const index = data.findIndex((event) => event.id === id);\n  if (!index && index !== 0) return;\n  const newData = [...data];\n  newData.splice(index, 1);\n  setData(newData);\n};\n\nconst Test = ({ setData, data }: propsType) => {\n  const [start, setStart] = useState<string>(\"0\");\n  const [end, setEnd] = useState<string>(\"120\");\n  const [count, setCount] = useState<string>(\"10\");\n  const [times, setTimes] = useState<string>(\"1\");\n  const [minHeight, setMinHeight] = useState<string>(\"30\");\n  const [maxHeight, setMaxHeight] = useState<string>(\"720\");\n\n  const [messages, setMessages] = useState<string[]>([\"Render finished.\"]);\n\n  const addMessage = (message: string) => {\n    setMessages([...messages, message]);\n  };\n\n  const set = {\n    start: setStart,\n    end: setEnd,\n    count: setCount,\n    times: setTimes,\n    minHeight: setMinHeight,\n    maxHeight: setMaxHeight,\n  };\n\n  const onChange = (\n    type: \"start\" | \"end\" | \"count\" | \"times\" | \"minHeight\" | \"maxHeight\"\n  ) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    set[type](value);\n  };\n\n  const onAddClick = () => {\n    addEvent(data, setData, start, end);\n  };\n\n  const onRemoveClick = (id: number) => () => {\n    removeEvent(data, setData, id);\n  };\n\n  const invalidAlert = (type: string) =>\n    alert(`${type} must be a positive number.`);\n  const isSettingValid = () => {\n    if (Number.isNaN(+count) || +count <= 0) {\n      invalidAlert(\"max events count\");\n      return false;\n    }\n    if (Number.isNaN(+times) || +times <= 0) {\n      invalidAlert(\"times\");\n      return false;\n    }\n    if (Number.isNaN(+minHeight) || +minHeight <= 0) {\n      invalidAlert(\"min height\");\n      return false;\n    }\n    if (Number.isNaN(+maxHeight) || +maxHeight <= 0) {\n      invalidAlert(\"max height\");\n      return false;\n    }\n    if (+maxHeight <= +minHeight) {\n      alert(\"max height must be larger than min height.\");\n      return false;\n    }\n    return true;\n  };\n\n  const renderClick = () => {\n    if (!isSettingValid()) return;\n    if (+times > 1) return;\n    randomTest(\n      addMessage,\n      setData,\n      +count,\n      +times,\n      +minHeight,\n      +maxHeight,\n      false\n    );\n  };\n\n  const computeClick = () => {\n    if (!isSettingValid()) return;\n    randomTest(\n      addMessage,\n      setData,\n      +count,\n      +times,\n      +minHeight,\n      +maxHeight,\n      true\n    );\n  };\n\n  return (\n    <div className={styles.test}>\n      <h1 className={styles.title}>Test</h1>\n      <div className={styles.block}>\n        <h3 className={styles.blockTitle}>Current Data</h3>\n        <div className={styles.blockContent}>\n          <ul className={styles.dataList}>\n            {data.map((event) => (\n              <li key={event.id}>\n                {`Start: ${event.start} End: ${event.end}`}\n                <button\n                  className={styles.remove}\n                  type=\"submit\"\n                  onClick={onRemoveClick(event.id)}\n                >\n                  x\n                </button>\n              </li>\n            ))}\n          </ul>\n          <div className={styles.inputArea}>\n            <label htmlFor=\"startInput\">\n              Start:\n              <input\n                id=\"startInput\"\n                type=\"text\"\n                value={start}\n                onChange={onChange(\"start\")}\n              />\n            </label>\n            <label htmlFor=\"endInput\">\n              End:\n              <input\n                id=\"endInput\"\n                type=\"text\"\n                value={end}\n                onChange={onChange(\"end\")}\n              />\n            </label>\n            <button className={styles.add} type=\"submit\" onClick={onAddClick}>\n              Add\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className={styles.block}>\n        <h3 className={styles.blockTitle}>Random Test</h3>\n        <div className={styles.blockContent}>\n          <div className={styles.dialog}>\n            {[...messages].reverse().map((message) => (\n              <p key={Math.random()} className={styles.message}>\n                {message}\n              </p>\n            ))}\n          </div>\n          <div className={styles.setting}>\n            <label htmlFor=\"maxEventCount\">\n              Events count:\n              <input\n                id=\"maxEventCount\"\n                type=\"text\"\n                value={count}\n                onChange={onChange(\"count\")}\n              />\n            </label>\n            <label htmlFor=\"times\">\n              Times:\n              <input\n                id=\"times\"\n                type=\"text\"\n                value={times}\n                onChange={onChange(\"times\")}\n              />\n            </label>\n            <label htmlFor=\"minHeight\">\n              Min height:\n              <input\n                id=\"minHeight\"\n                type=\"text\"\n                value={minHeight}\n                onChange={onChange(\"minHeight\")}\n              />\n            </label>\n            <label htmlFor=\"maxHeight\">\n              Max height:\n              <input\n                id=\"maxHeight\"\n                type=\"text\"\n                value={maxHeight}\n                onChange={onChange(\"maxHeight\")}\n              />\n            </label>\n            <button\n              className={+times === 1 ? \"\" : styles.disabled}\n              type=\"submit\"\n              onClick={renderClick}\n            >\n              Render\n            </button>\n            <button type=\"submit\" onClick={computeClick}>\n              Compute only\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Test;\n","import React, { useState } from \"react\";\nimport Calendar from \"./components/Calendar\";\nimport Test from \"./components/Test\";\nimport { merge, generateNodeGroup, NodeGroup, Event } from \"./lib/index\";\nimport \"./App.css\";\n\nconst defaultData = [\n  {\n    start: 30,\n    end: 150,\n    id: 0,\n  },\n  {\n    start: 540,\n    end: 600,\n    id: 1,\n  },\n  {\n    start: 560,\n    end: 620,\n    id: 2,\n  },\n  {\n    start: 610,\n    end: 670,\n    id: 3,\n  },\n];\n\nfunction App() {\n  const [data, setData] = useState(defaultData);\n  const eventGroups = merge(data);\n  const nodeGroups: NodeGroup[] = eventGroups.map(generateNodeGroup);\n\n  (window as any).layOutDay = (events: { start: number; end: number }[]) => {\n    const dataWithId: Event[] = [];\n    for (let i = 0; i < events.length; i += 1) {\n      dataWithId.push({ id: i, ...events[i] });\n    }\n    setData(dataWithId);\n  };\n\n  return (\n    <div className=\"App\">\n      <Calendar nodeGroups={nodeGroups} />\n      <Test setData={setData} data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}